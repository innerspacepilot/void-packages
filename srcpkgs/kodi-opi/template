# DRMPRIME must be disabled for video to work
pkgname=kodi-opi
version=19.0
revision=18
_fullversion=7cb0e644620c3d5c3cc435dc6130d21176926226
checksum=262f564219cf8a3b83241b16ce5ac91bcc5df97dcf221b0924b147ce60c2d956
build_style=cmake
wrksrc="xbmc-${_fullversion}"
short_desc="Software media player and entertainment hub for digital media (RPi)"
maintainer="Helmut Pozimski <helmut@pozimski.eu>"
homepage="http://www.kodi.tv/"
license="GPL-2.0-or-later"
distfiles="https://github.com/xbmc/xbmc/archive/${_fullversion}.tar.gz"
LDFLAGS+=" -Wl,-z,stack-size=1048576"
CFLAGS=" -march=armv7-a+neon-vfpv4"
CXXFLAGS=$CFLAGS
patch_args="-Np1"

nopie=yes
# armv7 only, musl not supported because of proprietary blobs 
archs="armv7l"

hostmakedepends="
 automake libtool pkg-config gperf cmake zip unzip nasm yasm
 gettext-devel libltdl-devel libmysqlclient-devel
 lzo-devel flatbuffers openjdk11 swig giflib-devel libpng-devel zlib-devel libjpeg-turbo-devel"
makedepends="
 eudev-libudev-devel pcre-devel expat-devel giflib-devel libpng-devel
 libjpeg-turbo-devel avahi-libs-devel alsa-lib-devel samba-devel tiff-devel
 libmysqlclient-devel libmpeg2-devel wavpack-devel zlib-devel lzo-devel
 fribidi-devel sqlite-devel freetype-devel jasper-devel faac-devel
 faad2-devel libmodplug-devel libressl-devel libass-devel libmad-devel
 fontconfig-devel libsamplerate-devel libmms-devel libcurl-devel ffmpeg-opi ffmpeg-opi-devel
 enca-devel boost-devel libbluetooth-devel yajl-devel libplist-devel
 librtmp-devel tinyxml-devel taglib-devel libcap-devel lame-devel libnfs-devel
 libxslt-devel libuuid-devel giflib-devel libcec-devel libmicrohttpd-devel
 libcdio-devel libssh-devel dcadec-devel spdlog
 flatbuffers-devel fmt-devel lcms2-devel libfstrcmp-devel rapidjson crossguid
 libinput-devel libxkbcommon-devel libcdio-paranoia libmali-devel libdrm-devel pulseaudio-devel python3-devel"

configure_args="
	-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
	-DENABLE_INTERNAL_CROSSGUID=OFF
	-DENABLE_VAAPI=OFF
	-DENABLE_VDPAU=OFF
	-DWITH_FFMPEG=/usr
	-DGBM_RENDER_SYSTEM=gles
	-DCORE_PLATFORM_NAME=gbm
	-DENABLE_OPENGL=OFF
	-DENABLE_OPENGLES=ON
	-DENABLE_CEC=ON
"
#	-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

#-DENABLE_NEON=OFF
#-DENABLE_X11=OFF
	#-DENABLE_INTERNAL_CROSSGUID=OFF
# -DGBM_LIBRARY=/usr/lib/mali/libgbm.so
# -DOPENGLES_gl_LIBRARY=/usr/lib/mali/libGLESv2.so
# -DEGL_LIBRARY=/usr/lib/mali/libEGL.so
# -DGBM_INCLUDE_DIR=/BUILD/include
# -DEGL_INCLUDE_DIR=/BUILD/include
# -DOPENGLES_INCLUDE_DIR=/BUILD/include



case "$XBPS_TARGET_MACHINE" in
	armv6*)   configure_args+=" -DWITH_CPU=arm1176jzf-s -DCMAKE_EXE_LINKER_FLAGS=-latomic"
		  LDFLAGS+=" -latomic";;
	# armv7*)   configure_args+=" -DWITH_CPU=cortex-a7+neon-vfpv4";;
	aarch64*) configure_args+=" -DWITH_CPU=cortex-a53";;
esac

# The following dependencies are dlopen(3)ed.
depends="ffmpeg-opi libmad libogg libcurl libflac libmodplug libass libmpeg2 lame
 librtmp libnfs>=1.9.7 libplist>=1.12 libssh libcec-devel>=4.0.5"
depends+=" hicolor-icon-theme desktop-file-utils"

provides="kodi-${version}_${revision}"

# Create xbmc system user to launch xbmc-standalone.
system_accounts="kodi"
kodi_homedir="/home/kodi"
kodi_groups="audio,input,video"
kodi_shell="/bin/bash"

pre_configure() {
	# find -type f | \
	# 	grep "configure\.ac\|Makefile\|cmake\|config\.site" | \
	# 	xargs sed -i  -e "s;-isystem;-I;g"

	# # Copy generated files to avoid requiring java.
	# mkdir -p build/build/swig

	# # THESE FILES MUST BE UPDATED WITH EVERY VERSION BUMP!
	# # (See kodi template)
	# cp -r $FILESDIR/swig.nojava-$version/* -t build/build/swig
	# cp $FILESDIR/CMakeCache.txt.nojava build/CMakeCache.txt

	# echo "set(FOUND_SWIG Yes)" > cmake/modules/FindSWIG.cmake

	if [ "$CROSS_BUILD" ]; then
		for i in JsonSchemaBuilder TexturePacker; do
			cat > cmake/modules/Find$i.cmake <<EOF
				add_executable($i::$i IMPORTED GLOBAL)
				set_target_properties($i::$i PROPERTIES
				IMPORTED_LOCATION "\${CORE_SOURCE_DIR}/tools/depends/native/$i/bin/$i")
				set_target_properties($i::$i PROPERTIES FOLDER Tools)
EOF
		done
	fi
}

pre_build() {
	if [ "$CROSS_BUILD" ]; then
		for i in JsonSchemaBuilder TexturePacker; do
			CC= LD= CXX= LDFLAGS= CFLAGS= CXXFLAGS= \
				make -C tools/depends/native/$i
		done
	fi
	# echo "========================"
	# set | grep ^C
	# echo "========================"
	# exit 1
}

post_build() {
	# Rebuild for target
	if [ "$CROSS_BUILD" ]; then
		for i in JsonSchemaBuilder TexturePacker; do
			make -C tools/depends/native/$i clean all \
				CC="$CC" CXX="$CXX" LD="$LD" AR="$AR" RANLIB="$RANLIB" \
				CPP="$CPP" AS="$AS" OBJDUMP="$OBJDUMP" \
				CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
		done
	fi
}

post_install() {
	# remove unused stuff
	rm -rf ${DESTDIR}/usr/include
	find ${DESTDIR}/usr/lib -name "*.cmake" -delete
	vsv kodi-standalone
	vinstall ${FILESDIR}/kodi.sudoers 600 etc/sudoers.d kodi
	vinstall ${FILESDIR}/reboot.py 755 usr/share/kodi/system
	mkdir -p ${DESTDIR}/usr/lib/python3.8
	touch ${DESTDIR}/usr/lib/python3.8/.void-python-hack
}

