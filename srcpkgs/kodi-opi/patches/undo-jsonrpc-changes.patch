--- b/xbmc/interfaces/json-rpc/PlayerOperations.cpp
+++ a/xbmc/interfaces/json-rpc/PlayerOperations.cpp
@@ -411,11 +411,11 @@
         return FailedToExecute;
 
       const CVariant& value = parameterObject["value"];
+      if (IsType(value, NumberValue) || value.isMember("percentage"))
+        g_application.SeekPercentage(IsType(value, NumberValue) ? value.asFloat() : value["percentage"].asFloat());
+      else if (value.isString() || value.isMember("step"))
-      if (value.isMember("percentage"))
-        g_application.SeekPercentage(value["percentage"].asFloat());
-      else if (value.isMember("step"))
       {
+        std::string step = value.isString() ? value.asString() : value["step"].asString();
-        std::string step = value["step"].asString();
         if (step == "smallforward")
           CBuiltins::GetInstance().Execute("playercontrol(smallskipforward)");
         else if (step == "smallbackward")
@@ -427,10 +427,10 @@
         else
           return InvalidParams;
       }
+      else if (value.isMember("seconds") && value.size() == 1)
-      else if (value.isMember("seconds"))
         g_application.GetAppPlayer().GetSeekHandler().SeekSeconds(static_cast<int>(value["seconds"].asInteger()));
+      else if (value.isObject())
+        g_application.SeekTime(ParseTimeInSeconds(value.isMember("time") ? value["time"] : value));
-      else if (value.isMember("time"))
-        g_application.SeekTime(ParseTimeInSeconds(value["time"]));
       else
         return InvalidParams;
 
--- b/xbmc/interfaces/json-rpc/schema/methods.json
+++ a/xbmc/interfaces/json-rpc/schema/methods.json
@@ -290,6 +290,9 @@
     "params": [
       { "name": "playerid", "$ref": "Player.Id", "required": true },
       { "name": "value", "required": true, "type": [
+          { "$ref": "Player.Position.Percentage", "required": true, "description": "Percentage value to seek to" },
+          { "$ref": "Player.Position.Time", "required": true, "description": "Time to seek to" },
+          { "type": "string", "enum": [ "smallforward", "smallbackward", "bigforward", "bigbackward" ], "required": true, "description": "Seek by predefined jumps" },
           { "type": "object", "properties": { "percentage": { "$ref": "Player.Position.Percentage", "required": true, "description": "Percentage value to seek to" } }, "additionalProperties": false, "required": true },
           { "type": "object", "properties": { "time": { "$ref": "Player.Position.Time", "required": true, "description": "Time to seek to" } }, "additionalProperties": false, "required": true },
           { "type": "object", "properties": { "step": { "type": "string", "enum": [ "smallforward", "smallbackward", "bigforward", "bigbackward" ], "required": true, "description": "Seek by predefined jumps" } }, "additionalProperties": false, "required": true },
